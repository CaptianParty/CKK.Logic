@page "/Info"
 @page "/Info/{shoppingCartId:int}"

@using CKK.Logic.Models
@using CKK.DB.UOW
@using CKK.DB.Interfaces
@inject NavigationManager NavManager

<div >
    <EditForm Model="@checkout.CustomerInfo" OnValidSubmit="@(async () => await FinishPayment())">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Street:</label>
            <InputText @bind-Value="checkout.CustomerInfo.Street" />
        </div>

        <div>
            <label>City:</label>
            <InputText @bind-Value="checkout.CustomerInfo.City" />
        </div>

        <div>
            <label>State:</label>
            <InputText @bind-Value="checkout.CustomerInfo.State" />
        </div>

        <div>
            <label>Zip:</label>
            <InputText @bind-Value="checkout.CustomerInfo.Zip" />
        </div>
    
        <div>
            <label>Name:</label>
            <InputText @bind-Value="checkout.CustomerInfo.Name" />
        </div>

        <div>
            <label>Card Number: </label>
            <InputText @bind-Value="checkout.CustomerInfo.CardNumber" />
        </div>

        <div>
            <label>Expiration Date:</label>
            <InputDate @bind-Value="checkout.CustomerInfo.ExpirationDate" />
        </div>

        <div>
            <label>CVV:</label>
            <InputText @bind-Value="checkout.CustomerInfo.CVC" />
        </div>
        <button type="submit">Finish</button>
    </EditForm>

</div>

@code {
    private CheckoutModel checkout = new();
    private Order order;



    //private Customer customer = new();

    [Inject]
    private IUnitOfWork uow { get; set; } = null!;

    [Parameter]
    public int shoppingCartId { get; set; }

    [Inject]
    private IJSRuntime JS { get; set; }

    protected override void OnParametersSet()
    {
        // Load the order using the shoppingCartId
        order = uow.Orders.GetAll().FirstOrDefault(o => o.ShoppingCartId == shoppingCartId);
    }


    protected async Task FinishPayment()
    {
        var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);
        if (cartItems == null || !cartItems.Any())
        {
            // Optionally show a message to the user
            return;
        }

        var inventory = uow.Products.GetAll();

        // --- CHANGED: Save purchased items to the order before clearing the cart ---
        order.PurchasedItems = cartItems.Select(i => new PurchasedItem
            {
                ProductName = uow.Products.GetAll().FirstOrDefault(p => p.Id == i.ProductId)?.Name ?? "",
                Quantity = i.Quantity,
                PriceAtPurchase = uow.Products.GetAll().FirstOrDefault(p => p.Id == i.ProductId)?.Price ?? 0
            }).ToList();
        uow.Orders.Update(order);
        // --- END CHANGED ---

        foreach (var item in cartItems)
        {
            Product prod = inventory.FirstOrDefault(x => x.Id == item.ProductId);

            if (prod != null)
            {
                prod.Quantity -= item.Quantity;
                if (prod.Quantity < 0)
                    prod.Quantity = 0; // Prevent negative inventory

                uow.Products.Update(prod);
            }
        }

        uow.ShoppingCarts.ClearCart(order.ShoppingCartId);

        if (JS != null)
        {
            await JS.InvokeVoidAsync("cartCookies.clearCart");
        }

        // --- CHANGED: Pass the orderId to the checkout page for the receipt ---
        NavManager.NavigateTo($"/checkout/{order.OrderId}");
        // --- END CHANGED ---
    }
    
}

@page "/shoppingCart"


@using CKK.Logic.Models
@using CKK.DB.UOW
@using CKK.DB.Interfaces
@using CKK.Persistance
@inject NavigationManager NavManager
@inject IJSRuntime JS

@if (uow == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="text-center">
        <h1 class="display-4">Shopping Cart!</h1>
    </div>
    <form method="get">
        <input type="hidden" value="@order.OrderId" />
        <p>The number selectors will add your items to the shopping cart.</p>
        <div class="row">
            @foreach (var item in uow.Products.GetAll())
            {
                <div class="card" style="width: 18rem; padding: 5px;">

                    <div class="card-body">
                        <h5 class="card-title text-center">@item.Name</h5>
                        <p class="card-text">@item.Price.ToString("c")</p>
                        <p class="card-text">Quantity Available: @item.Quantity</p>
                        <br />
                    </div>

                    <div class="card-footer d-flex align-items-center">

                        <input class="num-spinner" id="spinner-@item.Id"
                               @onchange="@(e => spinnerChange(item.Id, e.Value))"
                               style="padding: 10px; width: 75%;" type="number"
                               value="@GetCartQuantity(item.Id)"
                               min="0" max="@item.Quantity" step="1" />


                        <a id = BuyNowBtn @onclick ="Info" 
                        class="btn btn-success btn-sm" 
                        style="margin-left: .85em; line-height:1;">Buy Now</a>


                    </div>
                </div>


            }
        </div>
    </form>


    <div >
        <a id="CartBtn" @onclick="CartPage" class="btn btn-success float-lg-start">@Cart, @checkoutTotal Quantity: @totalQuantity</a>
    </div>
}

@code {
    //MAKE THE TOTAL AND QUANTITY POPULATE WHEN YOU REOPEN THE WINDOW 

    string checkoutTotal = $"Check Out - .00";
    int totalQuantity = 0;
    private Order order;
    [Inject]
    private IUnitOfWork uow { get; set; } = null!;


    //SHOP PAGE CODE
    protected override async Task OnInitializedAsync()
    {
        if (uow != null) //Valid uow
        {
            order = uow.Orders.GetById(1);
            if (order == null) 
            {
                Order newOrder = new Order() { OrderId = 1, OrderNumber = "1", CustomerId = 1, ShoppingCartId = 100 };
                order = newOrder;
                uow.Orders.Add(newOrder);
            }

            UpdateTotal();
        }
        StateHasChanged();
    }

    

    protected void UpdateTotal()
    {
        var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);
        totalQuantity = cartItems?.Sum(item => item.Quantity) ?? 0;

        var total = uow.ShoppingCarts.GetTotal(order.ShoppingCartId).ToString("c");
        checkoutTotal = $"Check Out - {total}";
    }

    private int GetCartQuantity(int productId)
    {
        var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);
        var item = cartItems?.FirstOrDefault(ci => ci.ProductId == productId);
        return item?.Quantity ?? 0;
    }


    protected void spinnerChange(int productId, object value)
    {
        var Item = uow.ShoppingCarts.AddToCart(order.ShoppingCartId, productId, Convert.ToInt16(value));
        UpdateTotal();

        var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);

        StateHasChanged();
        
    }

    //CART PAGE CODE

    string Cart= "Go to Cart";

    protected async Task CartPage()
    {
        var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);
        if (cartItems == null || !cartItems.Any())
        {
             await ShowAlert("Your cart is empty. Please add items before checking out");
            return;
        }
        
        var total = uow.ShoppingCarts.GetTotal(order.ShoppingCartId);
        if (total == 0)
        {
            return;
        }

        UpdateTotal();
        NavManager.NavigateTo($"/Cart/{order.ShoppingCartId}");
    }
    
    protected async Task Info()
    {
        var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);
        if (cartItems == null || !cartItems.Any())
        {
             await ShowAlert("Your cart is empty. Please add items before checking out");
            return;
        }
        var total = uow.ShoppingCarts.GetTotal(order.ShoppingCartId);
        if (total == 0)
        {
            return;
        }
        NavManager.NavigateTo($"/Info/{order.ShoppingCartId}");
    }
    private async Task ShowAlert(string alert)
    {
        await JS.InvokeVoidAsync("alert", alert);
    }
}



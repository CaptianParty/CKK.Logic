@page "/checkout/{orderId:int}"

@using CKK.Logic.Models
@using CKK.DB.Interfaces
@using CKK.DB.UOW

@if (purchasedItems != null && purchasedItems.Any())
{
    <h3>Receipt</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Unit Price</th>
                <th>Subtotal</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in purchasedItems)
            {
                <tr>
                    <td>@item.ProductName</td>
                    <td>@item.Quantity</td>
                    <td>@item.PriceAtPurchase.ToString("c")</td>
                    <td>@($"${item.Quantity * item.PriceAtPurchase}")</td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="3" class="text-end fw-bold">Total:</td>
                <td class="fw-bold">@cartTotal.ToString("c")</td>
            </tr>
        </tfoot>
    </table>
    <button class="btn btn-primary" onclick="window.print()">Print Receipt</button>
}
else
{
    <p>No items found for this order.</p>
}
@code {


    [Inject]
    private IUnitOfWork uow { get; set; } = null!;

    [Parameter]
    public int orderId { get; set; }



    private List<PurchasedItem> purchasedItems = new();
    private decimal cartTotal = 0;

    protected override void OnParametersSet()
    {
        var order = uow.Orders.GetAll().FirstOrDefault(o => o.OrderId == orderId);
        if (order != null && order.PurchasedItems != null)
        {
            purchasedItems = order.PurchasedItems;
            cartTotal = purchasedItems.Sum(i => i.Quantity * i.PriceAtPurchase);
        }
    }



}
